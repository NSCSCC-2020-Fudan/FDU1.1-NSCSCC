#include <asm.h>
#include <regdef.h>
#include <inst_test.h>

LEAF(n26_and_test)
    .set noreorder
    addiu s0, s0 ,1
    li  s2, 0x00
###test inst
    TEST_AND(0x5c95951a, 0xca00c414, 0x48008410)
    TEST_AND(0x9ba8ba70, 0xe99fce38, 0x89888a30)
    TEST_AND(0xd30319e0, 0x0ba4cff6, 0x030009e0)
    TEST_AND(0xce6912e8, 0x6676b20e, 0x46601208)
    TEST_AND(0x1d337960, 0x744dd280, 0x14015000)
    TEST_AND(0x79565822, 0xd58a73c7, 0x51025002)
    TEST_AND(0x5493ce59, 0xa7e95630, 0x04814610)
    TEST_AND(0x4a90f478, 0xdea16664, 0x4a806460)
    TEST_AND(0x912edb93, 0x8f4b9870, 0x810a9810)
    TEST_AND(0x08040b84, 0xfa97e908, 0x08040900)
    TEST_AND(0x187a1708, 0xff84714a, 0x18001108)
    TEST_AND(0xb139ef3d, 0x0008d970, 0x0008c930)
    TEST_AND(0xa57271c0, 0xa2ee9b84, 0xa0621180)
    TEST_AND(0xd62b2c40, 0x126bc8b0, 0x122b0800)
    TEST_AND(0x6a13dd76, 0x7d18d2c0, 0x6810d040)
    TEST_AND(0xc5a43778, 0x7c92bbcf, 0x44803348)
    TEST_AND(0xd2d22752, 0xa85fcf0e, 0x80520702)
    TEST_AND(0xa01004f0, 0x6447566b, 0x20000460)
    TEST_AND(0xef2075c0, 0x494b1e41, 0x49001440)
    TEST_AND(0x7156a5d8, 0x65b55820, 0x61140000)
    TEST_AND(0x31c796ae, 0xb49c4a52, 0x30840202)
    TEST_AND(0x76232809, 0x14caecb0, 0x14022800)
    TEST_AND(0x29c67a68, 0x977de748, 0x01446248)
    TEST_AND(0x391a132c, 0xdb8c8240, 0x19080200)
    TEST_AND(0x626187d0, 0x7dee4ac8, 0x606002c0)
    TEST_AND(0x67041d46, 0x9cc9d008, 0x04001000)
    TEST_AND(0xdc40afb0, 0x46358b58, 0x44008b10)
    TEST_AND(0xa1d7e318, 0x71e91fb8, 0x21c10318)
    TEST_AND(0x58b0656c, 0xd2c99848, 0x50800048)
    TEST_AND(0xd5753bfd, 0x389ded57, 0x10152955)
    TEST_AND(0x8973d568, 0x394adb92, 0x0942d100)
    TEST_AND(0xd22a9760, 0x86cd9020, 0x82089020)
    TEST_AND(0x43259f97, 0x89d36232, 0x01010212)
    TEST_AND(0x9e07993a, 0x4368b090, 0x02009010)
    TEST_AND(0x3f838050, 0x1686ce40, 0x16828040)
    TEST_AND(0xdf67503c, 0x09723ea0, 0x09621020)
    TEST_AND(0x94508308, 0x63b79ec0, 0x00108200)
    TEST_AND(0xb8355a8c, 0x01889dac, 0x0000188c)
    TEST_AND(0x963f8820, 0x7e5ad680, 0x161a8000)
    TEST_AND(0x2abd583c, 0xaaa67038, 0x2aa45038)
    TEST_AND(0x9614d1c0, 0x407fc954, 0x0014c140)
    TEST_AND(0x3a194614, 0xdf54fd98, 0x1a104410)
    TEST_AND(0x664c5f4c, 0x61dcf9b6, 0x604c5904)
    TEST_AND(0x0a6dfca6, 0xb2a543b7, 0x022540a6)
    TEST_AND(0x3fee3f38, 0xee41ccd5, 0x2e400c10)
    TEST_AND(0xfd1e0666, 0x9e5c7518, 0x9c1c0400)
    TEST_AND(0x5d3eb4a0, 0xf9a63dc4, 0x59263480)
    TEST_AND(0x58a10760, 0x9e6fd2cf, 0x18210240)
    TEST_AND(0x19c92068, 0x74622ce0, 0x10402060)
    TEST_AND(0x230ddea0, 0xc48054b4, 0x000054a0)
    TEST_AND(0x66c96ea6, 0xf48ad438, 0x64884420)
    TEST_AND(0xb7b6adee, 0xdac24448, 0x92820448)
    TEST_AND(0x5ce52f02, 0xf5bad1b8, 0x54a00100)
    TEST_AND(0xddc03c20, 0xe2d1e3c8, 0xc0c02000)
    TEST_AND(0x291451e0, 0xc57af0f6, 0x011050e0)
    TEST_AND(0xae67581c, 0x682f82c4, 0x28270004)
    TEST_AND(0x58bd5420, 0xb86ec92d, 0x182c4020)
    TEST_AND(0x71e200cc, 0x1187e734, 0x11820004)
    TEST_AND(0x3dfa66e2, 0xcc6c689a, 0x0c686082)
    TEST_AND(0x7a9f1a82, 0x088cf068, 0x088c1000)
    TEST_AND(0xe4f5af34, 0xc4fb9ff0, 0xc4f18f30)
    TEST_AND(0x2e8afda6, 0x01d57b80, 0x00807980)
    TEST_AND(0x375d5662, 0x68abe84c, 0x20094040)
    TEST_AND(0xeaa2d9e4, 0xc0b33098, 0xc0a21080)
    TEST_AND(0x16b53118, 0x0905f9d8, 0x00053118)
    TEST_AND(0xc5a05764, 0x094b22be, 0x01000224)
    TEST_AND(0xd543a900, 0xc411b348, 0xc401a100)
    TEST_AND(0xcb5c743f, 0x41f27449, 0x41507409)
    TEST_AND(0x60f4e19c, 0x25fd2d68, 0x20f42108)
    TEST_AND(0x6abd680b, 0xca540db0, 0x4a140800)
    TEST_AND(0x1fd7068c, 0x509a75c5, 0x10920484)
    TEST_AND(0x883d6f28, 0x00316ec0, 0x00316e00)
    TEST_AND(0x6dce5980, 0x60a2bfc4, 0x60821980)
    TEST_AND(0x8f774a4c, 0xade40fa9, 0x8d640a08)
    TEST_AND(0x51d81d44, 0x96601268, 0x10401040)
    TEST_AND(0x774c28d0, 0xa3071a42, 0x23040840)
    TEST_AND(0x08ce3455, 0x416fa198, 0x004e2010)
    TEST_AND(0x05007c06, 0x0b0391b0, 0x01001000)
    TEST_AND(0x1ee2dbb6, 0x07a2999a, 0x06a29992)
    TEST_AND(0xe1f75750, 0x997a9eb2, 0x81721610)
    TEST_AND(0x2d918f40, 0xd0835f38, 0x00810f00)
    TEST_AND(0xbd703e4c, 0x5dedf7a8, 0x1d603608)
    TEST_AND(0x36368f00, 0x0446f408, 0x04068400)
    TEST_AND(0x02cbc9f8, 0x727f5d2c, 0x024b4928)
    TEST_AND(0xeffb32d0, 0x4c2ee094, 0x4c2a2090)
    TEST_AND(0x5b228e0c, 0xd01a52b8, 0x50020208)
    TEST_AND(0x75a2aa1d, 0x518b7d38, 0x51822818)
    TEST_AND(0xd2952800, 0x2e70c5ad, 0x02100000)
    TEST_AND(0x75ad93f8, 0x9bd4e22a, 0x11848228)
    TEST_AND(0xe6e6b078, 0x64eee100, 0x64e6a000)
    TEST_AND(0xf9e9e608, 0x11cf0d68, 0x11c90408)
    TEST_AND(0x1e8c7440, 0xb5231f34, 0x14001400)
    TEST_AND(0xbe13d325, 0x8b33d5a8, 0x8a13d120)
    TEST_AND(0xe4eaac90, 0x7898f834, 0x6088a810)
    TEST_AND(0x6e6f51e9, 0x5569e434, 0x44694020)
    TEST_AND(0x2f1c41ac, 0xf9ab0400, 0x29080000)
    TEST_AND(0xd1814c80, 0x1772c9e0, 0x11004880)
    TEST_AND(0x6fe2c2a8, 0xa96f9682, 0x29628280)
    TEST_AND(0x98e99e80, 0x02c3120e, 0x00c11200)
    TEST_AND(0xfb3ad4a4, 0x3e604bc8, 0x3a204080)
    TEST_AND(0x09a2b564, 0x15fc6a5c, 0x01a02044)
    TEST_AND(0x9cb51c3c, 0x9f8cc7a7, 0x9c840424)
    TEST_AND(0x13256570, 0x4b1c4d77, 0x03044570)
    TEST_AND(0x1854110c, 0xcd229890, 0x08001000)
    TEST_AND(0xe17cdb10, 0x42eff3b8, 0x406cd310)
    TEST_AND(0x9dd4be60, 0xb06e9f50, 0x90449e40)
    TEST_AND(0x0a10b4c0, 0xe94ae0e0, 0x0800a0c0)
    TEST_AND(0xfa593c4f, 0x9ae99c83, 0x9a491c03)
    TEST_AND(0x374398c0, 0xfcfdce70, 0x34418840)
    TEST_AND(0x0eaf04d3, 0x96446480, 0x06040480)
    TEST_AND(0xb3262e98, 0xd661455e, 0x92200418)
    TEST_AND(0x4de0a5fe, 0xa2477fdc, 0x004025dc)
    TEST_AND(0x79d73190, 0xaeaf6288, 0x28872080)
    TEST_AND(0x7d918ced, 0x483952b8, 0x481100a8)
    TEST_AND(0xffaab2aa, 0x811d2bc5, 0x81082280)
    TEST_AND(0xe1dad258, 0xb36d3b4a, 0xa1481248)
    TEST_AND(0x605b69d2, 0x81df7d66, 0x005b6942)
    TEST_AND(0xe2a6fc4c, 0x03c5ef88, 0x0284ec08)
    TEST_AND(0x0ae2faf0, 0x7631f787, 0x0220f280)
    TEST_AND(0x429a9660, 0xcb744c88, 0x42100400)
    TEST_AND(0xedd2cbdb, 0x7157d1cf, 0x6152c1cb)
    TEST_AND(0xf52cd4d8, 0xf1e8e638, 0xf128c418)
    TEST_AND(0xead96490, 0x14cbf1ff, 0x00c96090)
    TEST_AND(0x17140ee8, 0xf2a89e0a, 0x12000e08)
    TEST_AND(0x36ff56c8, 0xb4b10f70, 0x34b10640)
    TEST_AND(0xd898efff, 0x446af848, 0x4008e848)
    TEST_AND(0x7a41e84b, 0x242008fc, 0x20000848)
    TEST_AND(0x78fd7d50, 0xa94c0ec0, 0x284c0c40)
    TEST_AND(0xd8adf880, 0x7cc93ebe, 0x58893880)
    TEST_AND(0x387b8f44, 0xa8c30a7c, 0x28430a44)
    TEST_AND(0x3ecb9950, 0x3b656b94, 0x3a410910)
    TEST_AND(0x32d64de0, 0x3cf09380, 0x30d00180)
    TEST_AND(0xbc21a900, 0xa8a89884, 0xa8208800)
    TEST_AND(0xdcc2f196, 0x8e552cd2, 0x8c402092)
    TEST_AND(0xdd99d4f8, 0xb7642ec7, 0x950004c0)
    TEST_AND(0x4715c100, 0x317d5cb6, 0x01154000)
    TEST_AND(0x1de7fe00, 0x2aafb760, 0x08a7b600)
    TEST_AND(0x41f65000, 0xea64e6e0, 0x40644000)
    TEST_AND(0x9f194d46, 0xd6654fb0, 0x96014d00)
    TEST_AND(0x6fcc3b81, 0x9463a0fa, 0x04402080)
    TEST_AND(0x388c01d8, 0xf9ca64ce, 0x388800c8)
    TEST_AND(0x72051d89, 0xfeda32e1, 0x72001081)
    TEST_AND(0x8487a910, 0x17c32ee7, 0x04832800)
    TEST_AND(0xa2290a1e, 0xcd7f7fb8, 0x80290a18)
    TEST_AND(0x89ee7d0e, 0xa6b67854, 0x80a67804)
    TEST_AND(0xe3afc5e0, 0x4503d98c, 0x4103c180)
    TEST_AND(0xd2d19826, 0x25a6c4f0, 0x00808020)
    TEST_AND(0x3a826eac, 0x9681ca40, 0x12804a00)
    TEST_AND(0xb88d8bc0, 0x7706d5bf, 0x30048180)
    TEST_AND(0x8823e582, 0x70bf6ec2, 0x00236482)
    TEST_AND(0xb3ed0600, 0xaaa224ba, 0xa2a00400)
    TEST_AND(0x02bb72c6, 0x5b2fb7b3, 0x022b3282)
    TEST_AND(0xbe9e4a08, 0xd96eb400, 0x980e0000)
    TEST_AND(0xba68b550, 0xce2a784e, 0x8a283040)
    TEST_AND(0x46f624c2, 0xbe46b80c, 0x06462000)
    TEST_AND(0xfb3d493a, 0x19ecc5ac, 0x192c4128)
    TEST_AND(0x49756b24, 0x0769e878, 0x01616820)
    TEST_AND(0xc7c8e6aa, 0x32523178, 0x02402028)
    TEST_AND(0xa123eb6a, 0xa3ae6cd0, 0xa1226840)
    TEST_AND(0xaef9cbe2, 0xa63f8980, 0xa6398980)
    TEST_AND(0x1b603c7a, 0x22fb8118, 0x02600018)
    TEST_AND(0x9cc1a068, 0x48eb6673, 0x08c12060)
    TEST_AND(0x5d03a98c, 0xaa1e6c6c, 0x0802280c)
    TEST_AND(0x9aff3d4c, 0xb4ad29c5, 0x90ad2944)
    TEST_AND(0x7793d300, 0x6f3fa5f4, 0x67138100)
    TEST_AND(0x4ed465a6, 0x50176028, 0x40146020)
    TEST_AND(0x51a01a42, 0x11110ba8, 0x11000a00)
    TEST_AND(0x341e1200, 0xa8ed84d0, 0x200c0000)
    TEST_AND(0x83835ef4, 0x72cb1bf0, 0x02831af0)
    TEST_AND(0xd306f262, 0x28cb4227, 0x00024222)
    TEST_AND(0x5bcb6730, 0x41410c58, 0x41410410)
    TEST_AND(0xbc8b6cd0, 0x21e183f0, 0x208100d0)
    TEST_AND(0x9f7a3caa, 0xdd0b5f80, 0x9d0a1c80)
    TEST_AND(0x4ee72240, 0x932cca40, 0x02240240)
    TEST_AND(0x142ca780, 0xab28ff08, 0x0028a700)
    TEST_AND(0xd9e826dc, 0x0be57a04, 0x09e02204)
    TEST_AND(0x5b7c7790, 0x131bded0, 0x13185690)
    TEST_AND(0x5bfddde8, 0x1f93b01d, 0x1b919008)
    TEST_AND(0x5d0a58d4, 0x42612acb, 0x400008c0)
    TEST_AND(0xdf48d4c4, 0x2f79e1bc, 0x0f48c084)
    TEST_AND(0xe4b05dfa, 0xbf927e4c, 0xa4905c48)
    TEST_AND(0x11694224, 0x7424eac0, 0x10204200)
    TEST_AND(0x3af8f490, 0x2ba24e98, 0x2aa04490)
    TEST_AND(0xbdde4f7c, 0x44436ebb, 0x04424e38)
    TEST_AND(0x80425208, 0x67c8181e, 0x00401008)
    TEST_AND(0x8eabe257, 0xdfbe6600, 0x8eaa6200)
    TEST_AND(0x5261d838, 0xb2c55d55, 0x12415810)
    TEST_AND(0x0c8bd07f, 0x507668bf, 0x0002403f)
    TEST_AND(0x7a1da4e0, 0xb23dd994, 0x321d8080)
    TEST_AND(0x3fcd8680, 0xd445accf, 0x14458480)
    TEST_AND(0xbd419df8, 0x291729a0, 0x290109a0)
    TEST_AND(0xed7a82cc, 0x228f14e8, 0x200a00c8)
    TEST_AND(0x8e2d147a, 0x6ace13d6, 0x0a0c1052)
    TEST_AND(0xd8d6f600, 0xf78e3339, 0xd0863200)
    TEST_AND(0x64200240, 0xb4a8f680, 0x24200200)
    TEST_AND(0x142500b0, 0x099f185d, 0x00050010)
    TEST_AND(0xedf8af32, 0x743fec88, 0x6438ac00)
    TEST_AND(0x5e277858, 0xc97aa830, 0x48222810)
    TEST_AND(0xf6539a14, 0xf1e16bfc, 0xf0410a14)
    TEST_AND(0x82417634, 0x981fb13b, 0x80013030)
    TEST_AND(0x4c9af998, 0x00000000, 0x00000000)
    TEST_AND(0xd726d47a, 0x00000000, 0x00000000)
    TEST_AND(0xb327a1df, 0x00000000, 0x00000000)
    TEST_AND(0x8403fb40, 0x00000000, 0x00000000)
    TEST_AND(0xc0699822, 0x00000000, 0x00000000)
    TEST_AND(0x409c796e, 0x00000000, 0x00000000)
    TEST_AND(0xa7a3b95c, 0x00000000, 0x00000000)
    TEST_AND(0xd9f92fee, 0x00000000, 0x00000000)
    TEST_AND(0x08f663be, 0x00000000, 0x00000000)
    TEST_AND(0x1c74f398, 0x00000000, 0x00000000)
    TEST_AND(0x369ddca8, 0x00000000, 0x00000000)
    TEST_AND(0xe4c7aa7c, 0x00000000, 0x00000000)
    TEST_AND(0x24030842, 0x00000000, 0x00000000)
    TEST_AND(0x86221f00, 0x00000000, 0x00000000)
    TEST_AND(0x0193dba6, 0x00000000, 0x00000000)
    TEST_AND(0xd9a2e4a0, 0x00000000, 0x00000000)
    TEST_AND(0xf73b6a88, 0x00000000, 0x00000000)
    TEST_AND(0xa629a850, 0x00000000, 0x00000000)
    TEST_AND(0xd97504ee, 0x00000000, 0x00000000)
    TEST_AND(0xd6b552f5, 0x00000000, 0x00000000)
    TEST_AND(0x7e0c6d04, 0x00000000, 0x00000000)
    TEST_AND(0x5765d22f, 0x00000000, 0x00000000)
    TEST_AND(0x6333244a, 0x00000000, 0x00000000)
    TEST_AND(0xec84245a, 0x00000000, 0x00000000)
    TEST_AND(0xa2db1ed8, 0x00000000, 0x00000000)
    TEST_AND(0x3a29d000, 0x00000000, 0x00000000)
    TEST_AND(0x6b63a800, 0x00000000, 0x00000000)
    TEST_AND(0xf6a7d130, 0x00000000, 0x00000000)
    TEST_AND(0x0035cf7f, 0x00000000, 0x00000000)
    TEST_AND(0x01f86960, 0x00000000, 0x00000000)
    TEST_AND(0x02a8c850, 0x00000000, 0x00000000)
    TEST_AND(0xffb00bf0, 0x00000000, 0x00000000)
    TEST_AND(0x36890d6a, 0x00000000, 0x00000000)
    TEST_AND(0x0d1f2cbe, 0x00000000, 0x00000000)
    TEST_AND(0x4e202c78, 0x00000000, 0x00000000)
    TEST_AND(0xefeb522a, 0x00000000, 0x00000000)
    TEST_AND(0x8fde116e, 0x00000000, 0x00000000)
    TEST_AND(0x2eb4f758, 0x00000000, 0x00000000)
    TEST_AND(0xf86bac3e, 0x00000000, 0x00000000)
    TEST_AND(0x13645b9d, 0x00000000, 0x00000000)
    TEST_AND(0x218ae799, 0x00000000, 0x00000000)
    TEST_AND(0xa43e4e94, 0x00000000, 0x00000000)
    TEST_AND(0x18aa1940, 0x00000000, 0x00000000)
    TEST_AND(0xeaa6b3d0, 0x00000000, 0x00000000)
    TEST_AND(0x0859169c, 0x00000000, 0x00000000)
    TEST_AND(0x05b77720, 0x00000000, 0x00000000)
    TEST_AND(0xcfee3094, 0x00000000, 0x00000000)
    TEST_AND(0xb2ee69a4, 0x00000000, 0x00000000)
    TEST_AND(0x9f73ccec, 0x00000000, 0x00000000)
    TEST_AND(0x8709e13e, 0x00000000, 0x00000000)
    TEST_AND(0x00000000, 0x78d0a5d8, 0x00000000)
    TEST_AND(0x00000000, 0xcb841e1e, 0x00000000)
    TEST_AND(0x00000000, 0x5c256710, 0x00000000)
    TEST_AND(0x00000000, 0xdc48ef02, 0x00000000)
    TEST_AND(0x00000000, 0x4c5625d9, 0x00000000)
    TEST_AND(0x00000000, 0x7518257d, 0x00000000)
    TEST_AND(0x00000000, 0x56d751f0, 0x00000000)
    TEST_AND(0x00000000, 0xcdfecd39, 0x00000000)
    TEST_AND(0x00000000, 0xf72b6c80, 0x00000000)
    TEST_AND(0x00000000, 0xa2783000, 0x00000000)
    TEST_AND(0x00000000, 0x528fa1d8, 0x00000000)
    TEST_AND(0x00000000, 0x9d587c76, 0x00000000)
    TEST_AND(0x00000000, 0xd74dd008, 0x00000000)
    TEST_AND(0x00000000, 0xb6b2f338, 0x00000000)
    TEST_AND(0x00000000, 0xaec6c5e4, 0x00000000)
    TEST_AND(0x00000000, 0x4c910a20, 0x00000000)
    TEST_AND(0x00000000, 0x2b54adbc, 0x00000000)
    TEST_AND(0x00000000, 0x54a09c60, 0x00000000)
    TEST_AND(0x00000000, 0x3a9f1a00, 0x00000000)
    TEST_AND(0x00000000, 0x1ed810c0, 0x00000000)
    TEST_AND(0x00000000, 0xd67ef000, 0x00000000)
    TEST_AND(0x00000000, 0xeade10d2, 0x00000000)
    TEST_AND(0x00000000, 0x67d8aac0, 0x00000000)
    TEST_AND(0x00000000, 0x8db02619, 0x00000000)
    TEST_AND(0x00000000, 0x26d556ee, 0x00000000)
    TEST_AND(0x00000000, 0x0e8edb30, 0x00000000)
    TEST_AND(0x00000000, 0x9c2d2a0c, 0x00000000)
    TEST_AND(0x00000000, 0x990839c0, 0x00000000)
    TEST_AND(0x00000000, 0x723c07f1, 0x00000000)
    TEST_AND(0x00000000, 0x12c89858, 0x00000000)
    TEST_AND(0x00000000, 0x8e7a79a0, 0x00000000)
    TEST_AND(0x00000000, 0x025e35a8, 0x00000000)
    TEST_AND(0x00000000, 0x30502894, 0x00000000)
    TEST_AND(0x00000000, 0xc083695b, 0x00000000)
    TEST_AND(0x00000000, 0x708d009d, 0x00000000)
    TEST_AND(0x00000000, 0x4b88db76, 0x00000000)
    TEST_AND(0x00000000, 0x05d6fcfc, 0x00000000)
    TEST_AND(0x00000000, 0xb5a4f620, 0x00000000)
    TEST_AND(0x00000000, 0x0ac9d65e, 0x00000000)
    TEST_AND(0x00000000, 0x68f3fd68, 0x00000000)
    TEST_AND(0x00000000, 0x18412472, 0x00000000)
    TEST_AND(0x00000000, 0x128cd0e0, 0x00000000)
    TEST_AND(0x00000000, 0x777b8540, 0x00000000)
    TEST_AND(0x00000000, 0xfafe9838, 0x00000000)
    TEST_AND(0x00000000, 0xe2a4a6e4, 0x00000000)
    TEST_AND(0x00000000, 0x3c8bc134, 0x00000000)
    TEST_AND(0x00000000, 0xdc6f1d78, 0x00000000)
    TEST_AND(0x00000000, 0xb84c0500, 0x00000000)
    TEST_AND(0x00000000, 0x23b45e2c, 0x00000000)
    TEST_AND(0x00000000, 0x14b92b6c, 0x00000000)
    TEST_AND(0x00000000, 0x00000000, 0x00000000)
###detect exception
    bne s2, zero, inst_error
    nop
###score ++
    addiu s3, s3, 1
###output (s0<<24)|s3
inst_error:  
    sll t1, s0, 24
    or t0, t1, s3 
    sw t0, 0(s1)
    jr ra
    nop
END(n26_and_test)
